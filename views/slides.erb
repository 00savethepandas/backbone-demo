<!DOCTYPE html>
<html lang="en">
<head>
    <title>Arc90 University | BackboneJS 101</title>
    <link rel="stylesheet" href="/css/lib/fathom.sample.css">
    <link rel="stylesheet" href="/css/lib/ir_black.css">
    <link href='http://fonts.googleapis.com/css?family=Droid+Sans:400,700|Droid+Sans+Mono' rel='stylesheet' type='text/css'>
    <script src="/js/lib/jquery-1.7.2.min.js"></script>
    <script src="/js/lib/fathom.min.js"></script>
    <script src="/js/lib/jquery.noisy.min.js"></script>
    <script src="/js/lib/highlight.pack.js"></script>
    <script src="/js/lib/underscore-min.js"></script>
    <script src="/js/lib/backbone-min.js"></script>
</head>
<body>

<div id="presentation">
    
    <div id="title" class="slide">
        <div>
            <img src="/img/backbone-300x300.png" alt="">
            <h2>Backbone.js</h2>
        </div>
        <h3>A gentle introduction to a JavaScript library</h3>
        <h4>â‰ˆ</h4>
        <h1>Arc90 University | May 24<sub>th</sup>, 2012</h1>
        <img src="/img/arc90_logo.png" width="118" height="46" alt="arc90" id="arc90-logo">
    </div>

    <div class="slide breaker">
        <h1>What is it?</h1>
    </div>

    <div class="slide">
        <blockquote style="margin-top: 80px">
            <h1>Official definition</h1>
            <p>Backbone.js gives structure to web applications by providing <strong>models</strong> with key-value binding and custom events, <strong>collections</strong> with a rich API of enumerable functions, <strong>views</strong> with declarative event handling, and connects it all to your existing API over a RESTful JSON interface.</p>
        </blockquote>
        <cite>- <a href="http://documentcloud.github.com/backbone/">http://documentcloud.github.com/backbone/</a></cite>
    </div>

    <div class="slide breaker">
        <h2>OMG</h2>
        <h1>It brings order to <br />the chaos</h1>
    </div>

    <div class="slide list">
        <h1>What is it not?</h1>
        <ul>
            <li>A big application framework like Cappucino, Sencha or SproutCore.</li>
            <li>The solution to every problem.</li>
        </ul>

        <h1>What are it's wins?</h1>
        <ul>
            <li>It's very light. <em>(5.6kb, Packed and gzipped)</em></li>
            <li>It's very flexible, pick and choose what parts you want.</li>
            <li>It's just JavaScript, you can completely reconfigure and extend it on the fly.</li>
        </ul>
    </div>

    <div class="slide breaker">
        <h1>Enough Talk.<br />Let's see some code.</h1>
    </div>

    <div class="slide code">
        <h1>Models</h1>
        <p>Lets make a simple model to store our a photo</p>

        <pre class="runnable">
            <code class="javascript">
var Statigram = {};

Statigram.Photo = Backbone.Model.extend({
    initialize : function() {
        log('#log0', this.id);
    }
});

// Create a new Photo model with an id = 1
var photo = new Statigram.Photo({ id : 1 });
            </code>
        </pre>
    </div>

    <div class="slide code">
        <h1>Models</h1>
        <p>Now let's sync the model to the server and retrieve the record for Photo.id = 1</p>

        <pre class="runnable">
            <code class="javascript">
var Statigram = {};

Statigram.Photo = Backbone.Model.extend({

    // Set a base URL for the model to hit. Backbone will create the url:
    // Request: GET http://127.0.0.1:4567/photo/1
    urlRoot : 'photo',

    initialize : function() {
        // fetch() uses Backbone.Sync to hit the server and
        // load the model with the returned JSON
        this.fetch({
            success : function(model, response) {
                // Use get() to grab model attributes
                log('#log1', model.get('title') + ' : ' + model.get('link'));
            }
        });
    }
});

var photo = new Statigram.Photo({ id : 1 });
            </code>
        </pre>
    </div>

        <div class="slide code">
        <h1>Models</h1>
        <p>Now let's make a change and persist it to the DB</p>

        <pre class="runnable">
            <code class="javascript">
var Statigram = {};

Statigram.Photo = Backbone.Model.extend({
    urlRoot : 'photo',

    initialize : function() {
        // After saving a sync event is fired to get the model up to date
        // so we'll watch for that event and act on it
        this.on("sync", function(model, response){
            log('#log2', model.get('title'));
        })
    }
});

var photo = new Statigram.Photo({ id : 1 });
photo.save({'title' : 'Jo Bob'});
            </code>
        </pre>
    </div>

    <div class="slide code">
        <h1>Collections</h1>
        <p>Manage a bunch of models using Underscore.js and other goodness</p>

        <pre class="runnable">
            <code class="javascript">
var Statigram = {};
Statigram.Photo = Backbone.Model.extend({}); // Model

// Make a Collection object
Statigram.Photos = Backbone.Collection.extend({
    url   : '/photos',
    model : Statigram.Photo // Explicitly tell it what model to use
});

// Create a collections and add some models
var photos = new Statigram.Photos();
photos.add([
    { id : 1 },
    { id : 2 },
    { id : 3 }
]);
log('#log3', [photos.length, JSON.stringify(photos)]);
            </code>
        </pre>
    </div>

    <div class="slide code">
        <h1>Collections</h1>
        <p>Use fetch() to populate a Collection from the server. In this case we'll get the whole DB back (12 rows) loaded into models.</p>

        <pre class="runnable">
            <code class="javascript">
var Statigram = {};
Statigram.Photo = Backbone.Model.extend({}); // Model

// Make a Collection object
Statigram.Photos = Backbone.Collection.extend({
    url   : '/photos',
    model : Statigram.Photo // Explicitly tell it what model to use
});

// Create a collections and add some models
var photos = new Statigram.Photos();
photos.fetch({
    success : function() {
        // Notice .pluck() - a nice bit of Underscore.js to help manage models
        log('#log4', [photos.length, JSON.stringify(photos.pluck('title'))]);
    }
});
            </code>
        </pre>
    </div>

    <div class="slide code">
        <h1>Collections: Manipulation</h1>
        <p>Like pluck() there are a bunch of available functions you can use to operate on your collection of models.</p>

        <pre class="runnable">
            <code class="javascript">
var Statigram = {};
Statigram.Photo = Backbone.Model.extend({});
Statigram.Photos = Backbone.Collection.extend({
    url   : '/photos', model : Statigram.Photo 
});
var photos = new Statigram.Photos();
photos.fetch({
    success : function() {
        log('#log5', [
            // Get a model from collection by Id
            photos.get(3).get('title'),

            // Get models that meet a criteria and return array
            photos.where({title : 'Galaxy California'})[0].get('title'), 
            
            // Pop - pop last model off stack and return it
            photos.pop().get('title')
            ]);  
    }
});
            </code>
        </pre>
    </div>

    <div class="slide code">
        <h1>Views</h1>
        <p>Now that we have data, we need to display it in a meaningful manner. Views will auto-assemble DOM elements for you based on the information you give it.</p>

        <pre class="runnable">
            <code class="javascript">
var Statigram = {};
Statigram.PhotoView = Backbone.View.extend({
    el : 'li', // We want to make list elements
    className : 'photo_view', // we would like this className
    render : function() {
        // note the magic $el - this is el wrapped in jQuery
        this.$el.html('A list element of striling reputation.');
        log('#log6', this.el);
    }
});
var photo_view = new Statigram.PhotoView();
photo_view.render();
            </code>
        </pre>
        <ul id="test_list"></ul>
    </div>

    <div class="slide code">
        <h1>Views</h1>
        <p>Use your collection and models to load data into your views.</p>

        <pre class="runnable">
            <code class="javascript">
var Statigram = {};
Statigram.Photo = Backbone.Model.extend({
    initialize : function() {
        this.view = new Statigram.PhotoView({ model : this });
        this.view.render();
    }
}); // Model
Statigram.Photos = Backbone.Collection.extend({
    url   : '/photos', model : Statigram.Photo
});
Statigram.PhotoView = Backbone.View.extend({
    el : 'li',
    className : 'photo_view',
    render : function() {
        this.$el.text(this.options.model.get('title'));
        log('#log7', this.el);
    }
});
var photos = new Statigram.Photos([{ id : 1, title : 'Manhattan' }]);
            </code>
        </pre>
        <ul id="test_list"></ul>
    </div>

</div>
<script>
    $(document).ready(function(){

        $("#presentation").fathom({
            scrollLength : 300,
            margin : 200
        });

        $('body').noisy({
            intensity: 1, 
            size: 400, 
            opacity: 0.08,
            monochrome: false
        });

        var x = 0;
        $('.runnable').each(function() {
            var code = $(this).find('code');
            var button = '<div class="run" title="Run"><button>Run Code</button><div id="log' + x + '" class="log"><span>Log ' + x +':</span> </div></div>';
            $(button).insertAfter($(this)).bind('click', function(){
              eval(code.text());    
            });
            x++;
        });

        hljs.tabReplace = '    ';
        hljs.initHighlightingOnLoad();

        var log = function(el, msg) {
            if (typeof msg === 'object') {
                if (msg.constructor.toString().indexOf("Array") !== -1) {
                    msg = msg.join(", ");
                }
            }
            $(el).append(msg);
        }

    });
</script>
</body>
</html>